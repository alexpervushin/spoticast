services:
  bot:
    build: .
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - bot_data:/app/data
    networks:
      - bot-network
    restart: unless-stopped
    command: python -m app.bot_runner

  web:
    build: .
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - web_data:/app/data
    networks:
      - bot-network
    restart: unless-stopped
    command: python -m app.web_runner

  db:
    image: postgres:17.2
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  bot_data:
  web_data:

networks:
  bot-network:
    driver: bridge 